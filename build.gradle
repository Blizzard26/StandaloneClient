apply plugin: 'application';
apply plugin: 'java';
apply plugin: 'eclipse';
apply plugin: 'findbugs';
apply plugin: 'pmd';
apply plugin: 'jacoco';
apply plugin: 'com.github.ben-manes.versions'

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    // classpath 'org.codehaus.groovy:groovy-backports-compat23:2.3.5' // uncomment if you're using Gradle 1.x
  }
}

// -SNAPSHOT is added if the release task is not set
version = '1.4'
archivesBaseName = 'STT'

def javaHome = System.properties['java.home']

sourceCompatibility = 1.8
mainClassName='org.stt.StartWithJFX'
applicationDefaultJvmArgs=["-Djava.util.logging.config.file=logging.properties"]

ext.mainClass = mainClassName

configurations {
	antlr4 {
		description = "ANTLR4"
	}
}

ext.antlr = [
	antlrDestPkg: "org.stt.g4",
	antlrSrcDir : "src/main/antlr",
	antlrGenDir : "gen-src/antlr/java"
]

clean {
	delete antlr.antlrGenDir
}

sourceSets {
	main.java.srcDirs += antlr.antlrGenDir
	main.resources.srcDirs += antlr.antlrSrcDir
	test.java.srcDirs += antlr.antlrGenDir
	test.resources.srcDirs += antlr.antlrGenDir
}

findbugs {
	excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

repositories {
	mavenCentral()
	maven {
		url "http://oss.sonatype.org/content/groups/public/"
		url "http://maven.atlassian.com/content/repositories/atlassian-public/"
	}
}


dependencies {
	antlr4  group: "org.antlr", name: "antlr4", version: "4.5.3"
	compile group: "org.antlr", name: "antlr4-runtime", version: "4.5.3"
	compile 'com.google.guava:guava:19.0'
	compile 'com.google.inject:guice:4.1.0'
	compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: '4.1.0'
	compile 'commons-io:commons-io:2.5'
	compile 'joda-time:joda-time:2.9.4'
	compile 'org.yaml:snakeyaml:1.17'
	compile 'com.atlassian.jira:jira-rest-java-client-core:4.0.0'
	compile 'com.atlassian.fugue:fugue:2.6.1'
	compile group: 'com.h2database', name: 'h2', version: '1.4.193'
	compile group: 'org.jooq', name: 'jooq', version: '3.8.6'

	testCompile 'junit:junit-dep:4.11'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile 'org.mockito:mockito-all:2.0.2-beta'
}

jar {
	//from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest.attributes("Main-Class":"org.stt.StartWithJFX")
	manifest.attributes("JavaFX-Feature-Proxy":"None")
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

task mkAntlrOutputDir << {
	mkdir(antlr.antlrGenDir)
}

task genAntlrSources(dependsOn: mkAntlrOutputDir, type: JavaExec) {
	// Based on https://github.com/xoom/gradle-antlr4-template/blob/master/build.gradle
	description = "Generates Java sources from an ANTLR4 grammar."

	inputs.dir file(antlr.antlrSrcDir)
	outputs.dir file(antlr.antlrGenDir)

	logger.info("ANTLR4 inputs: " + inputs)
	logger.info("ANTLR4 outputs: " + outputs)

	def grammars = fileTree(antlr.antlrSrcDir).include("**/*.g4")

	main = "org.antlr.v4.Tool"
	classpath = configurations.antlr4
	def pkg = antlr.antlrDestPkg.replaceAll("\\.", "/")
	args = [ "-o",
              "${antlr.antlrGenDir}/${pkg}",
			  /*"-atn", */
              "-visitor",
              "-package", antlr.antlrDestPkg,
		grammars.files
	].flatten()
}

task adjustAntlrGenDir(dependsOn: genAntlrSources) << {
	description = "Adjusts files generated by ANTLR4 compilation."

	def pattern = ~/(\/\/ Generated from ).+[\/\\]([A-Za-z]+.g4 by ANTLR .*)/

	fileTree(antlr.antlrGenDir).include("**/*").each { f ->
		logger.info("Checking file $f")
		def r = new BufferedReader(new InputStreamReader(new FileInputStream(f), "UTF-8"))
		ArrayList<String> lines = new ArrayList()
		boolean rewrite = false
		r.eachLine { line ->
			def m = pattern.matcher(line)
			if (m.matches()) {
				def line2 = m[0][1] + m[0][2]
				if (!line.equals(line2)) {
					rewrite = true;
					line = line2;
				}
			}
			lines.add(line)
		}
		r.close()

		if (rewrite) {
			logger.info("Rewrite file $f")

			def w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"))
			lines.each { line ->
				w.writeLine(line)
			}
			w.close()
		}
	}
}



compileJava {
	dependsOn adjustAntlrGenDir
}

clean {
	delete antlr.antlrGenDir
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.1'
}

task release(dependsOn: 'distZip') << {
	println "Built release for $project.version"
}

gradle.taskGraph.whenReady {taskGraph ->
	if (!taskGraph.hasTask(release)) {
		version += '-SNAPSHOT'
	}
}

task copyResources(type: Copy) {
    from 'logging.properties'
    from (sourceSets.main.resources.srcDirs)
    {
        include 'Logo.*'
    }
    into { startScripts.outputDir }
}


startScripts {
    dependsOn(copyResources)
    doLast {
        windowsScript.text = windowsScript.text.replace("java.exe",
                "javaw.exe")
        windowsScript.text = windowsScript.text.replace("\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %STANDALONE_CLIENT_OPTS%",
                "start \"SimpleTimeTracking\" \"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %STANDALONE_CLIENT_OPTS%")
    }
}
