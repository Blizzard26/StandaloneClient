apply plugin: 'application';
apply plugin: 'java';
apply plugin: 'eclipse';
apply plugin: 'findbugs';
apply plugin: 'pmd';
apply plugin: 'jacoco';


// -SNAPSHOT is added if the release task is not set
version = '1.2'
archivesBaseName = 'STT'

def javaHome = System.properties['java.home']

sourceCompatibility = 1.7
mainClassName='org.stt.StartWithJFX'

ext.mainClass = mainClassName

configurations {
	antlr4 {
		description = "ANTLR4"
	}
}

ext.antlr = [
	antlrDestPkg: "org.stt.g4",
	antlrSrcDir : "src/main/antlr",
	antlrGenDir : "gen-src/antlr/java"
]

clean {
	delete antlr.antlrGenDir
}

sourceSets {
	main.java.srcDirs += antlr.antlrGenDir
	main.resources.srcDirs += antlr.antlrSrcDir
}

findbugs {
	excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

repositories {
	mavenCentral()
	maven {
		url "http://oss.sonatype.org/content/groups/public/"
	}
}


dependencies {
	antlr4  group: "org.antlr", name: "antlr4", version: "4.3"
	compile group: "org.antlr", name: "antlr4-runtime", version: "4.3"
	if (file("$javaHome/lib/jfxrt.jar").exists()) {
		compile files("$javaHome/lib/jfxrt.jar")
	}
	compile 'com.google.guava:guava:18.0'
	compile 'commons-io:commons-io:2.4'
	compile 'joda-time:joda-time:2.5'
	compile 'org.yaml:snakeyaml:1.15-SNAPSHOT'

	testCompile 'junit:junit-dep:4.11'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile 'org.mockito:mockito-all:1.10.8'
}

jar {
	from { configurations.compile.findAll { !it.name.contains("jfxrt.jar") } collect { it.isDirectory() ? it : zipTree(it) } }
	manifest.attributes("Main-Class":"org.stt.StartWithJFX")
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

task mkAntlrOutputDir << {
	mkdir(antlr.antlrGenDir)
}

task genAntlrSources(dependsOn: mkAntlrOutputDir, type: JavaExec) {
	// Based on https://github.com/xoom/gradle-antlr4-template/blob/master/build.gradle
	description = "Generates Java sources from an ANTLR4 grammar."

	inputs.dir file(antlr.antlrSrcDir)
	outputs.dir file(antlr.antlrGenDir)

	logger.info("ANTLR4 inputs: " + inputs)
	logger.info("ANTLR4 outputs: " + outputs)

	def grammars = fileTree(antlr.antlrSrcDir).include("**/*.g4")

	main = "org.antlr.v4.Tool"
	classpath = configurations.antlr4
	def pkg = antlr.antlrDestPkg.replaceAll("\\.", "/")
	args = [ "-o",
              "${antlr.antlrGenDir}/${pkg}",
		/*"-atn", */
              "-no-listener",
              "-visitor",
              "-package", antlr.antlrDestPkg,
		grammars.files
	].flatten()
}

task adjustAntlrGenDir(dependsOn: genAntlrSources) << {
	description = "Adjusts files generated by ANTLR4 compilation."

	def pattern = ~/(\/\/ Generated from ).+[\/\\]([A-Za-z]+.g4 by ANTLR .*)/

	fileTree(antlr.antlrGenDir).include("**/*").each { f ->
		logger.info("Checking file $f")
		def r = new BufferedReader(new InputStreamReader(new FileInputStream(f), "UTF-8"))
		ArrayList<String> lines = new ArrayList()
		boolean rewrite = false
		r.eachLine { line ->
			def m = pattern.matcher(line)
			if (m.matches()) {
				def line2 = m[0][1] + m[0][2]
				if (!line.equals(line2)) {
					rewrite = true;
					line = line2;
				}
			}
			lines.add(line)
		}
		r.close()

		if (rewrite) {
			logger.info("Rewrite file $f")

			def w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"))
			lines.each { line ->
				w.writeLine(line)
			}
			w.close()
		}
	}
}

compileJava {
	dependsOn adjustAntlrGenDir
}

clean {
	delete antlr.antlrGenDir
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.2'
}

task release(dependsOn: 'distZip') << {
	println "Built release for $project.version"
}

gradle.taskGraph.whenReady {taskGraph ->
	if (!taskGraph.hasTask(release)) {
		version += '-SNAPSHOT'
	}
}
